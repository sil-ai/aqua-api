"""Add agent_critique_issue table with resolution tracking

Revision ID: 27be62d452c9
Revises: 2eccf09f725c
Create Date: 2025-10-29 18:03:27.597807

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "27be62d452c9"
down_revision: Union[str, None] = "2eccf09f725c"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Create agent_critique_issue table if it doesn't exist
    # First check if table exists
    from sqlalchemy import text

    conn = op.get_bind()
    result = conn.execute(
        text(
            """
        SELECT EXISTS (
            SELECT FROM information_schema.tables
            WHERE table_schema = 'public'
            AND table_name = 'agent_critique_issue'
        );
    """
        )
    )
    table_exists = result.fetchone()[0]

    if not table_exists:
        # Create the complete table
        op.create_table(
            "agent_critique_issue",
            sa.Column("id", sa.Integer(), nullable=False),
            sa.Column("assessment_id", sa.Integer(), nullable=False),
            sa.Column("vref", sa.String(length=20), nullable=False),
            sa.Column("book", sa.String(length=10), nullable=False),
            sa.Column("chapter", sa.Integer(), nullable=False),
            sa.Column("verse", sa.Integer(), nullable=False),
            sa.Column("issue_type", sa.String(length=10), nullable=False),
            sa.Column("text", sa.Text(), nullable=True),
            sa.Column("comments", sa.Text(), nullable=True),
            sa.Column("severity", sa.Integer(), nullable=False),
            sa.Column(
                "is_resolved", sa.Boolean(), nullable=False, server_default="false"
            ),
            sa.Column("resolved_by_id", sa.Integer(), nullable=True),
            sa.Column("resolved_at", sa.TIMESTAMP(), nullable=True),
            sa.Column("resolution_notes", sa.Text(), nullable=True),
            sa.Column("created_at", sa.TIMESTAMP(), server_default=sa.text("now()")),
            sa.ForeignKeyConstraint(
                ["assessment_id"],
                ["assessment.id"],
            ),
            sa.ForeignKeyConstraint(
                ["resolved_by_id"],
                ["users.id"],
            ),
            sa.PrimaryKeyConstraint("id"),
        )

        # Create all indexes
        op.create_index(
            "ix_agent_critique_issue_assessment",
            "agent_critique_issue",
            ["assessment_id"],
            unique=False,
        )
        op.create_index(
            "ix_agent_critique_issue_vref",
            "agent_critique_issue",
            ["vref"],
            unique=False,
        )
        op.create_index(
            "ix_agent_critique_issue_book_chapter_verse",
            "agent_critique_issue",
            ["book", "chapter", "verse"],
            unique=False,
        )
        op.create_index(
            "ix_agent_critique_issue_type",
            "agent_critique_issue",
            ["issue_type"],
            unique=False,
        )
        op.create_index(
            "ix_agent_critique_issue_severity",
            "agent_critique_issue",
            ["severity"],
            unique=False,
        )
        op.create_index(
            "ix_agent_critique_issue_resolved",
            "agent_critique_issue",
            ["is_resolved"],
            unique=False,
        )
        op.create_index(
            "ix_agent_critique_issue_resolved_by",
            "agent_critique_issue",
            ["resolved_by_id"],
            unique=False,
        )
    else:
        # Table exists, just add the new resolution tracking columns
        op.add_column(
            "agent_critique_issue",
            sa.Column(
                "is_resolved", sa.Boolean(), nullable=False, server_default="false"
            ),
        )
        op.add_column(
            "agent_critique_issue",
            sa.Column("resolved_by_id", sa.Integer(), nullable=True),
        )
        op.add_column(
            "agent_critique_issue",
            sa.Column("resolved_at", sa.TIMESTAMP(), nullable=True),
        )
        op.add_column(
            "agent_critique_issue",
            sa.Column("resolution_notes", sa.Text(), nullable=True),
        )
        op.create_index(
            "ix_agent_critique_issue_resolved",
            "agent_critique_issue",
            ["is_resolved"],
            unique=False,
        )
        op.create_index(
            "ix_agent_critique_issue_resolved_by",
            "agent_critique_issue",
            ["resolved_by_id"],
            unique=False,
        )
        op.create_foreign_key(
            None, "agent_critique_issue", "users", ["resolved_by_id"], ["id"]
        )

    # Handle the lexeme cards index change (this was detected by autogenerate)
    op.drop_index(
        "ix_agent_lexeme_cards_lang_confidence", table_name="agent_lexeme_cards"
    )
    op.create_index(
        "ix_agent_lexeme_cards_lang_confidence",
        "agent_lexeme_cards",
        ["source_language", "target_language", "confidence"],
        unique=False,
        postgresql_ops={"confidence": "DESC"},
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Handle the lexeme cards index change rollback
    op.drop_index(
        "ix_agent_lexeme_cards_lang_confidence",
        table_name="agent_lexeme_cards",
        postgresql_ops={"confidence": "DESC"},
    )
    op.create_index(
        "ix_agent_lexeme_cards_lang_confidence",
        "agent_lexeme_cards",
        ["source_language", "target_language", sa.text("confidence DESC")],
        unique=False,
    )

    # Check if we need to drop the whole table or just the resolution columns
    from sqlalchemy import text

    conn = op.get_bind()
    result = conn.execute(
        text(
            """
        SELECT column_name FROM information_schema.columns
        WHERE table_schema = 'public'
        AND table_name = 'agent_critique_issue'
        AND column_name = 'created_at';
    """
        )
    )
    has_created_at = bool(result.fetchone())

    if has_created_at:
        # Table was created in this migration, drop it completely
        op.drop_table("agent_critique_issue")
    else:
        # Table existed before, just remove the resolution columns
        op.drop_constraint(None, "agent_critique_issue", type_="foreignkey")
        op.drop_index(
            "ix_agent_critique_issue_resolved_by", table_name="agent_critique_issue"
        )
        op.drop_index(
            "ix_agent_critique_issue_resolved", table_name="agent_critique_issue"
        )
        op.drop_column("agent_critique_issue", "resolution_notes")
        op.drop_column("agent_critique_issue", "resolved_at")
        op.drop_column("agent_critique_issue", "resolved_by_id")
        op.drop_column("agent_critique_issue", "is_resolved")
    # ### end Alembic commands ###
